#+TITLE: tutorial-de-c
#+AUTHOR: Patricio Martínez
#+EMAIL: maxxcan@disroot.org

* Introducción

Este tutorial es una traducción del tutorial que podemos encontrar en [[https://www.tutorialspoint.com/cprogramming/index.htm][Tutorialspoint]]

* Resumen

C es un lenguaje de propósito general, un lenguaje de alto nivel que fue originalmente desarrollado por *Dennis M. Ritchie* para desarrollar el sistema operativo UNIX en los laboratorios Bell. C fue originalmente implementado para la computadora DEC PDP-11 en 1972. 

En 1979, Brian Kerninghan y Dennis Ritchie produjeron la primera descripción de C para el público, ahora conocido como el estándar K&R. 

El sistema operativo UNIX, el compilador de C y esencialmente todas las aplicaciones UNIX han sido escritas en C. C es un lenguaje ampliamente usado como lenguaje profesional por varias razones

+ Fácil de aprender
+ Lenguaje estructurado
+ Produce programas eficientes
+ Puede manejar actividades a bajo nivel
+ Se puede compilar para una amplia variedad de plataformas

** Hechos sobre C 

 + C fue inventado para escribir un sistema operativo llamado UNIX
 + C es un sucesor del lenguaje B el cual fue introducido sobre los tempranos 1970
 + El lenguaje fue formalizado en 1988 por el Instituto Nacional Americano de Estándares (ANSI)
 + El sistema operativo UNIX está totalmente escrito en C
 + A día de hoy C es el lenguaje más usado y popular como Lenguaje de Sistemas
 + Muchos de los estados de arte han sido implementados usando C
 + A día de hoy muchos de los populares Sistemas Operativos Linux o bases de datos como MySQL han sido escritos en C

** Por qué usar C

C fue inicialmente usado para el trabajo de desarrollo de sistemas, particularmente la programación de sistemas operativos. C fue adoptado como un lenguaje de desarrollo de sistemas porque producía código que corría casi tan rápido como código escrito en lenguaje ensamblador. Algunos ejemplos de uso de C podrían ser - 

+ Sistemas Operativos 
+ Compiladores de Lenguajes
+ Ensambladores
+ Editores de texto
+ Gestores de impresión
+ Controladores de Red
+ Programas modernos
+ Bases de datos
+ Lenguajes interpretados
+ Utilidades

** Programas en C

Un programa en C puede variar desde 3 líneas a millones de líneas y puede ser escrito en una o más ficheros de texto con la extensión *".c"*; por ejemplo, /hello.c/. Podemos usar "vi", "vim" o cualquier editor de texto para escribir tu programa C en un archivo.

Este tutorial asume que conoces como editar un fichero de texto y escribir código fuente en un archivo de programa. 


* C - Configurando el entorno

Si queremos configurar nuestro entorno de para programar en el lenguaje C, necesitamos las dos siguientes herramientas de software en nuestro computador; un Editor y el Compilador de C.

** Editor de texto

Será usado para escribir nuestro programa. Ejemplos de algunos editores incluyen Windows Notepad, OS Edit command, Brief, Epsilon, EMACS, y vim o vi. 

El nombre y la versión del editor de texto puede variar en diferentes sistemas operativos. Por ejemplo, Notepad será usado en Windows, y vim o vi puede ser usado en windows y también en Linux o UNIX.

Los archivos que creemos con el editor de texto son llamados archivos fuente y ellos contienen los códigos fuente. Los archivos fuente para los programas C son típicamente nombrados con la extensión *".c"*. 

Antes de empezar nuestro programa, tendremos que estar seguro que usamos un editor de texto con el cual tendremos suficiente experiencia para escribir programas, salvarlos, compilarlos y finalmente ejecutarlos.

** El compilador C

El código fuente escrito en el archivo fuente es la fuente humanamente leíble para nuestro programa. Pero necesita ser "compilado", en lenguaje máquina para que nuestra CPU puede realmente ejecutar el programa. 

El compilador compila el código fuente en el programa ejecutable final. El compilador más frecuentemente usado y de libre acceso es el compilador de GNU C/C++, en caso distinto tenemos los compiladores de HP o Solaris si tenemos los sistemas operativos respectivos. 

En la sección siguiente explicaremos como instalar el compilador GNU C/C++ en varios Sistemas Operativos. Mencionamos juntos C/C++ porque el compilador GNU Gcc funciona para ambos lenguajes. 

** Instalación en UNIX/Linux

Si estás usando *Linux o UNIX*, entonces comprobaremos si GCC está instalado en el sistema introduciendo el siguiente comando  - 

: $ gcc -v

Si el compilador  está instalado, entonces imprimirá el siguiente mensaje - 

#+BEGIN_SRC shell
Using built-in specs.
Target: i386-redhat-linux
Configured with: ../configure --prefix=/user ......
Thread model: posix
gcc version 4.1.2 200080704 (Red Hat 4.1.2-46)
#+END_SRC

Si GCC no está instalado, entonces tendremos que instalarlo por nosotros mismos usando las detalladas instrucciones disponibles en [[https://gcc.gnu.org/install/][la página de gcc]]. 

Este tutorial ha sido escrito basado en Linux y todos los ejemplos han sido compilados  en la distribución Cent OS del sistema Linux.

** Instalación en Mac OS

Si usas un Mac OS X, la forma más sencilla de obtener GCC es descargándose el entorno de desarrollo Xcode desde la página de Apple y seguir las instrucciones. Una vez hayas configurado Xcode, serás capaz de usar el Compilador GNU C/C++.

** Instalación en Windows

Para instalar GCC en Windows, se necesita instalar MinGW. Para instalar MinGW, es necesario ir a su [[http://www.mingw.org/][página]], y seguir el enlace a su página de descarga.

Mientras se instala Min GW, al mínimo, se debe instalar gcc-core, gcc-g++, binutils, y el MinGW runtime, pero se podrían instalar más cosas.

Añadiremos el subdirectorio *bin* de la instalación a la variable *PATH*, así como especificar las herramientas a usar. 

Después de que la instalación se haya completado, serás capaz de ejecutar gcc, g++, ranlib, diltool y varias otras herramientas de GNU en la línea de Comandos de Windows.

* C - Estructura del programa

Antes de que estudiemos los bloques básicos del programa C, echemos un ojo la estructura mínima de un programa en C que tomaremos de referencia en los siguientes capítulos. 

** Ejemplo - Hola Mundo - 

Un programa en C básicamente consiste de las siguientes partes - 

+ Comandos de preprocesado
+ Funciones
+ Variables
+ Declaraciones y expresiones
+ Comentarios

Echemos un vistazo a un simple código que puede dibujar las palabras "Hola Mundo" -  

#+BEGIN_SRC C
#include <stdio.h>

int main() {
/* mi primer programa en C*/
printf("Hola, Mundo! \n");

return 0
}
#+END_SRC

Veamos las  distintas partes del programa - 

+ La primera línea del programa /#include<stdio.h>/ es  un comando preprocesador, el cual le dice al compilador de C incluir stdio.h antes de empezar a compilar. 

+ La siguiente línea /main()/ es la función principal donde la ejecución del programa comienza.

+ la siguiente línea /*..*/ será ignorada por el compilador y se usará para poner comentarios en el programa. Tales líneas son llamadas  comentarios en el programa.

+ La próxima línea /printf(...)/ es otra función disponible en C la cual causa que el mensaje "Hola Mundo!" sea mostrado en la pantalla. 

+ La siguiente línea *return 0*; termina la función main() y devuelve el valor 0.

** Compilando y ejecutando el programa C

Vamos a ver cómo salvar el código fuente en un archivo, como compilarlo y ejecutarlo. Siguiendo unos simples pasos - 

+ Abrir el editor de texto y añadir el código antes mencionado

+ Salvar el archivo como hola.c

+ Abrir una consola de comandos e ir al directorio donde se ha salvado el archivo

+ Escribir gcc hola.c y presionar intro para compilar el código

+ si no hay errores en el código, la línea de comandos generará un fichero ejecutable a.out

+ Ahora, escribimos a.out para ejecutar el programa

+ Veremos la salida "Hola Mundo" dibujado en la pantalla

: $ gcc hello.c
: $ ./a.out
: Hola Mundo!

* C - Sintáxis básica 

Hemos visto la estructura de un programa C, así que será fácil entender otros bloques de construcción del lenguaje C. 

** Tokens en C

Un programa en C consiste en varios tokens y un token puede ser una palabra clave, un identificador, una constante, una cadena de texto, o un símbolo. Por ejemplo, la siguiente declaración consiste de cinco tokens. - 

#+BEGIN_SRC C
printf("Hola Mundo! \n");
#+END_SRC

Los tokens individuales son - 

#+BEGIN_SRC C
printf
(
"Hola Mundo! \n"
)
;
#+END_SRC

** Punto y coma

En un programa C, el punto y coma es una declaración de fin. Eso es, cada declaración individual debe ser terminada con una punto y coma. Ello indica el final de una entidad lógica.

Aquí vemos dos declaraciones diferentes - 

#+BEGIN_SRC C
printf("Hola, Mundo! \n");
return 0;
#+END_SRC

** Comentarios

Los comentarios son como textos de ayuda  en el programa y son ignorados por el compilador. Empiezan con /* y terminan con */ tal como se muestra a continuación.

#+BEGIN_SRC C
/* mi primer programa en C */
#+END_SRC

No podemos tener comentarios dentro de comentarios y no pueden ocurrir con una cadena de caracteres.

** Identificadores 

Un identificador en C es un nombre usado para identificar una variable, función, o cualquier otro item definido por el usuario. Un identificador empiezar con unal letra de la A a la Z, mayúsculo o minúscula o un guíon bajo '_' seguido por cero o más letras, guiones bajos y dígitos (de 0 a 9).

C no permite caracteres de puntuación tales como @, $, y % en los identificadores. C es sensible a mayúsculas y minúsculas. Por lo que, Manpower y manpower son dos identificadores distintos en C. Aquí hay algunos ejemplos de identificadores aceptables - 

: mohd  zara abc move_name a_123
: myname50 _temp j a23b9 retVal

** Palabras clave

Las siguiente lista muestra las palabras reservadas en C. Esas palabras reservadas no deben ser usadas como constantes o variables o cualquier nombre de identificador. 


| auto     | else   | long     | switch   |
| break    | enum   | register | typedef  |
| case     | extern | return   | union    |
| char     | float  | short    | unsigned |
| const    | for    | signed   | void     |
| continue | goto   | sizeof   | volatile |
| default  | if     | static   | while    |
| do       | int    | struct   | _Packed  |
| double   |        |          |          |


** Espacios en blanco en C

Una línea conteniendo solo espacios en blanco, posiblemente con un comentario, es conocida como línea en blanco y el compilador de C la ignora.

Los espacios en blanco es el termino usado en C para describir espacio en blanco, tabulador, carácter de nueva línea y comentarios. Los espacios en blanco separa una parte de una declaración de otra y habilita al compilador a identificar donde un elemento en una declaración, tal como entero, finaliza y compieza el siguiente elemento.

Por lo tanto, en la siguiente declaración - 

: int edad;

debe haber al menos un espacio en blanco (normalmente un espacio) entre int y edad para que el compilador sea capaz de distinguirlos. Por otro lado, en la siguiente declaración - 

: frutas = manzanas + naranjas; //  obtener el total de frutas

Los espacios en blanco no son necesarios entre fruta y el símbolo =, o entre el = y las manzanas, además somos libres de incluir alguno más si deseamos mayor legibilidad. 


